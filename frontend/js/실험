비교

document.addEventListener("DOMContentLoaded", async (e) => {
  const id = new URLSearchParams(location.search).get("id");
  const response = await axios.get(`http://127.0.0.1:3000/whisky/check/${id}`);
  const tips = response.data;

  const checkDataWrap = document.querySelector("#checkDataWrap");
  const checkBox = document.createElement("div");

  checkBox.innerHTML = `
    <div id="tipCorrecionTitle">${tips.tip_title}</div>
    <div id="tipCorrecionContent">
      <div id="tipContent">
        <img id="checkImg" src='http://127.0.0.1:3000/${tips.img}' />
        ${tips.tip_content}
      </div>
    </div>
  `;
  checkDataWrap.append(checkBox);

  const commentBtnWrap = document.querySelector("#commentBtnWrap");
  const { data } = await axios.get(`http://127.0.0.1:3000/whisky/fix/${id}`);

  const renderComments = (comments) => {
    commentBtnWrap.innerHTML = ''; // Clear existing comments
    comments.forEach((e, index) => {
      const date = new Date(e.updatedAt);
      const month = date.getMonth() + 1 > 9 ? `${date.getMonth() + 1}` : `0${date.getMonth() + 1}`;
      const str = `${date.getFullYear()}/${month}/${date.getDate()}`;
      const commentElement = document.createElement("div");
      commentElement.classList.add("comment_list", `d${index}`);
      commentElement.innerHTML = `
        <div id="comment">
          <div id="commentSmallText">
            <div class="writer">${e.nick_name}</div>
            <div class="comment-content">${e.tip_comment}</div>
            <div>${str}</div>
          </div>
          <div id="icon">
            <button class="check_btn1"><img class="checkicon" src="../img/comment.png" alt=""></button>
            <button class="check_btn2" data-index="${index}"><img class="checkicon" src="../img/pen.png" alt=""></button>
            <button class="check_btn3" data-index="${index}"><img class="checkicon" src="../img/trashcan.jpeg" alt=""></button>
          </div>
        </div>
        <div class="outside"></div>
      `;
      commentBtnWrap.append(commentElement);
    });

    // Register event handlers for new comments
    registerEventHandlers(comments);
  };

  const registerEventHandlers = (comments) => {
    // 댓글 삭제
    document.querySelectorAll(".check_btn3").forEach(button => {
      button.addEventListener("click", async (e) => {
        const index = e.target.closest("button").getAttribute("data-index");
        const commentId = comments[index].id;
        try {
          const response = await axios.delete(`http://127.0.0.1:3000/whisky/commentDelete/${commentId}`);
          if (response.data.success) {
            comments.splice(index, 1); // Remove comment from array
            renderComments(comments); // Re-render comments
          } else {
            alert("댓글 삭제에 실패했습니다.");
          }
        } catch (error) {
          console.error('Error:', error);
          alert("댓글 삭제 중 오류가 발생했습니다.");
        }
      });
    });

    // 댓글 수정
    document.querySelectorAll(".check_btn2").forEach(button => {
      button.addEventListener("click", (e) => {
        const index = e.target.closest("button").getAttribute("data-index");
        const commentElement = document.querySelector(`.d${index}`);
        const originalComment = commentElement.querySelector(".comment-content").innerText;

        const commentupload = document.createElement("input");
        commentupload.classList.add("updateInput");
        commentupload.value = originalComment;
        const commentUpBtn = document.createElement("button");
        commentUpBtn.classList.add("updateBtn");
        commentUpBtn.innerText = "등록";
        const commentCBtn = document.createElement("button");
        commentCBtn.innerText = "취소";

        commentCBtn.onclick = () => {
          commentupload.remove();
          commentUpBtn.remove();
          commentCBtn.remove();
        };

        commentElement.querySelector("#commentSmallText").append(commentupload, commentUpBtn, commentCBtn);

        commentUpBtn.onclick = async () => {
          const newComment = commentupload.value;
          if (newComment === originalComment || newComment.trim() === '') {
            alert("변경된 내용이 없거나 빈 댓글입니다.");
            return;
          }

          const json = {
            id: comments[index].id,
            nick_name: "nick_name",  // 여기에 실제 로그인한 사용자의 닉네임을 넣어야 함
            tip_comment: newComment
          };

          try {
            const response = await axios.put(`http://127.0.0.1:3000/whisky/commentupdate/${comments[index].id}`, json);
            if (response.data.success) {
              comments[index].tip_comment = newComment; // Update comment in array
              renderComments(comments); // Re-render comments
            } else {
              alert("댓글 수정에 실패했습니다.");
            }
          } catch (error) {
            console.error('Error:', error);
            alert("댓글 수정 중 오류가 발생했습니다.");
          }
        };
      });
    });
  };

  renderComments(data);

  // 댓글 등록
  const commentBtn = document.querySelector("#commentBtn");

  commentBtn.addEventListener("click", async (e) => {
    const commenText = document.querySelector("#commenText").value;
    if (commenText.trim() === '') {
      alert("댓글 내용을 입력하세요.");
      return;
    }

    const json = { commentText: commenText, nickname: "nick_name", id };

    try {
      const result = await axios.post(`http://127.0.0.1:3000/whisky/comment`, json, {
        headers: {
          'Content-Type': 'application/json'
        }
      });

      const date = new Date();
      const month = date.getMonth() + 1 > 9 ? `${date.getMonth() + 1}` : `0${date.getMonth() + 1}`;
      const str = `${date.getFullYear()}/${month}/${date.getDate()}`;

      const newComment = {
        id: result.data.id,
        nick_name: result.data.nick_name,
        tip_comment: result.data.tip_comment,
        updatedAt: date
      };

      data.push(newComment); // Add new comment to data array
      renderComments(data); // Re-render comments

      document.querySelector("#commenText").value = '';
    } catch (error) {
      console.error('Error:', error);
      alert("댓글 등록 중 오류가 발생했습니다.");
    }
  });
});
